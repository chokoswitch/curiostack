/*
 * MIT License
 * 
 * Copyright (c) 2019 Choko (choko@curioswitch.org)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

syntax = "proto3";

package org.curioswitch.scrapers.instagram.api;

option java_package = "org.curioswitch.scrapers.instagram.api";
option java_multiple_files = true;

// A post by a user on Instagram.
message Post {
  // The Instagram ID of the post.
  string id = 1;
}

// A request to scrape posts from user pages.
message ScrapeUsernamesRequest {
  // The usernames to scrape.
  repeated string username = 1;
}

// A response to scrape posts from user pages.
message ScrapeUsernamesResponse {
  // The posts for a given user.
  message UserPosts {
    // The username who posted.
    string username = 1;

    // The posts of the user.
    repeated Post post = 2;
  }
  // The posts for all the `username`s in `ScrapeUsernamesRequest`.
  repeated UserPosts user_posts = 1;
}

// A request to scrape location info from matching posts.
message ScrapeLocationsRequest {
  // Hashtags to scrape. The Hashtag page for each item will be scraped for location posts.
  repeated string hashtag = 1;

  // Usernames for user pages to scrape for location posts. If `hashtag` is also set, posts will
  // only be processed for locations if they contain at least one of `hashtag`.
  repeated string username = 2;
}

// A response with locations scraped from posts.
message ScrapeLocationsResponse {
  // Information about a location from Instagram.
  message LocationPage {
    // The Instagram ID of the location page.
    string id = 1;

    // The name of the location.
    string name = 2;

    // The latitude of the location.
    double latitude = 3;

    // The longitude of the location.
    double longitude = 4;

    // The address of the location.
    string address = 5;
  }

  // The locations found in scraped posts.
  repeated LocationPage location = 1;
}

// A service for scraping posts from Instagram. Instagram only allows scraping of its top-level
// pages, so it is not possible to scrape though multiple pages.
service InstagramScraperService {

  // Scrape the posts from the user pages of the given usernames.
  rpc ScrapeUsernames (ScrapeUsernamesRequest) returns (ScrapeUsernamesResponse);

  // Scrape the locations from posts on user or hashtag pages.
  rpc ScrapeLocations (ScrapeLocationsRequest) returns (ScrapeLocationsResponse);
}
