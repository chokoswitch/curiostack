/*
 * MIT License
 *
 * Copyright (c) 2019 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 * This file is generated by jOOQ.
 */
package org.curioswitch.database.cafemapdb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.curioswitch.database.cafemapdb.Cafemapdb;
import org.curioswitch.database.cafemapdb.Indexes;
import org.curioswitch.database.cafemapdb.Keys;
import org.curioswitch.database.cafemapdb.tables.records.LandmarkRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Landmark extends TableImpl<LandmarkRecord> {

    private static final long serialVersionUID = 1694497978;

    /**
     * The reference instance of <code>cafemapdb.landmark</code>
     */
    public static final Landmark LANDMARK = new Landmark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LandmarkRecord> getRecordType() {
        return LandmarkRecord.class;
    }

    /**
     * The column <code>cafemapdb.landmark.id</code>.
     */
    public final TableField<LandmarkRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>cafemapdb.landmark.google_place_id</code>.
     */
    public final TableField<LandmarkRecord, String> GOOGLE_PLACE_ID = createField(DSL.name("google_place_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cafemapdb.landmark.s2_cell</code>.
     */
    public final TableField<LandmarkRecord, ULong> S2_CELL = createField(DSL.name("s2_cell"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>cafemapdb.landmark.type</code>.
     */
    public final TableField<LandmarkRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cafemapdb.landmark.created_at</code>.
     */
    public final TableField<LandmarkRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cafemapdb.landmark.updated_at</code>.
     */
    public final TableField<LandmarkRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>cafemapdb.landmark</code> table reference
     */
    public Landmark() {
        this(DSL.name("landmark"), null);
    }

    /**
     * Create an aliased <code>cafemapdb.landmark</code> table reference
     */
    public Landmark(String alias) {
        this(DSL.name(alias), LANDMARK);
    }

    /**
     * Create an aliased <code>cafemapdb.landmark</code> table reference
     */
    public Landmark(Name alias) {
        this(alias, LANDMARK);
    }

    private Landmark(Name alias, Table<LandmarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Landmark(Name alias, Table<LandmarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Landmark(Table<O> child, ForeignKey<O, LandmarkRecord> key) {
        super(child, key, LANDMARK);
    }

    @Override
    public Schema getSchema() {
        return Cafemapdb.CAFEMAPDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LANDMARK_GOOGLE_PLACE_ID, Indexes.LANDMARK_PRIMARY);
    }

    @Override
    public Identity<LandmarkRecord, ULong> getIdentity() {
        return Keys.IDENTITY_LANDMARK;
    }

    @Override
    public UniqueKey<LandmarkRecord> getPrimaryKey() {
        return Keys.KEY_LANDMARK_PRIMARY;
    }

    @Override
    public List<UniqueKey<LandmarkRecord>> getKeys() {
        return Arrays.<UniqueKey<LandmarkRecord>>asList(Keys.KEY_LANDMARK_PRIMARY, Keys.KEY_LANDMARK_GOOGLE_PLACE_ID);
    }

    @Override
    public TableField<LandmarkRecord, LocalDateTime> getRecordTimestamp() {
        return CREATED_AT;
    }

    @Override
    public Landmark as(String alias) {
        return new Landmark(DSL.name(alias), this);
    }

    @Override
    public Landmark as(Name alias) {
        return new Landmark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Landmark rename(String name) {
        return new Landmark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Landmark rename(Name name) {
        return new Landmark(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, ULong, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
