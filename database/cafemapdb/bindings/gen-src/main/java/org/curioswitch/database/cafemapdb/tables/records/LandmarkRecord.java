/*
 * MIT License
 *
 * Copyright (c) 2019 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 * This file is generated by jOOQ.
 */
package org.curioswitch.database.cafemapdb.tables.records;


import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.curioswitch.database.cafemapdb.tables.Landmark;
import org.curioswitch.database.cafemapdb.tables.interfaces.ILandmark;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LandmarkRecord extends UpdatableRecordImpl<LandmarkRecord> implements Record6<ULong, String, ULong, String, LocalDateTime, LocalDateTime>, ILandmark {

    private static final long serialVersionUID = -384678626;

    /**
     * Setter for <code>cafemapdb.landmark.id</code>.
     */
    public LandmarkRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.id</code>.
     */
    @Override
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>cafemapdb.landmark.google_place_id</code>.
     */
    public LandmarkRecord setGooglePlaceId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.google_place_id</code>.
     */
    @Override
    public String getGooglePlaceId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>cafemapdb.landmark.s2_cell</code>.
     */
    public LandmarkRecord setS2Cell(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.s2_cell</code>.
     */
    @Override
    public ULong getS2Cell() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>cafemapdb.landmark.type</code>.
     */
    public LandmarkRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.type</code>.
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>cafemapdb.landmark.created_at</code>.
     */
    public LandmarkRecord setCreatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.created_at</code>.
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>cafemapdb.landmark.updated_at</code>.
     */
    public LandmarkRecord setUpdatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>cafemapdb.landmark.updated_at</code>.
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, ULong, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<ULong, String, ULong, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return Landmark.LANDMARK.ID;
    }

    @Override
    public Field<String> field2() {
        return Landmark.LANDMARK.GOOGLE_PLACE_ID;
    }

    @Override
    public Field<ULong> field3() {
        return Landmark.LANDMARK.S2_CELL;
    }

    @Override
    public Field<String> field4() {
        return Landmark.LANDMARK.TYPE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Landmark.LANDMARK.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Landmark.LANDMARK.UPDATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getGooglePlaceId();
    }

    @Override
    public ULong component3() {
        return getS2Cell();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getGooglePlaceId();
    }

    @Override
    public ULong value3() {
        return getS2Cell();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdatedAt();
    }

    @Override
    public LandmarkRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public LandmarkRecord value2(String value) {
        setGooglePlaceId(value);
        return this;
    }

    @Override
    public LandmarkRecord value3(ULong value) {
        setS2Cell(value);
        return this;
    }

    @Override
    public LandmarkRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public LandmarkRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public LandmarkRecord value6(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public LandmarkRecord values(ULong value1, String value2, ULong value3, String value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(ILandmark from) {
        setId(from.getId());
        setGooglePlaceId(from.getGooglePlaceId());
        setS2Cell(from.getS2Cell());
        setType(from.getType());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LandmarkRecord
     */
    public LandmarkRecord() {
        super(Landmark.LANDMARK);
    }

    /**
     * Create a detached, initialised LandmarkRecord
     */
    public LandmarkRecord(ULong id, String googlePlaceId, ULong s2Cell, String type, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Landmark.LANDMARK);

        set(0, id);
        set(1, googlePlaceId);
        set(2, s2Cell);
        set(3, type);
        set(4, createdAt);
        set(5, updatedAt);
    }
}
