/*
 * This file is generated by jOOQ.
 */
package org.curioswitch.database.cafemapdb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.curioswitch.database.cafemapdb.Cafemapdb;
import org.curioswitch.database.cafemapdb.Indexes;
import org.curioswitch.database.cafemapdb.Keys;
import org.curioswitch.database.cafemapdb.tables.records.PlaceRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Place extends TableImpl<PlaceRecord> {

    private static final long serialVersionUID = -534312675;

    /**
     * The reference instance of <code>cafemapdb.place</code>
     */
    public static final Place PLACE = new Place();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaceRecord> getRecordType() {
        return PlaceRecord.class;
    }

    /**
     * The column <code>cafemapdb.place.id</code>.
     */
    public final TableField<PlaceRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>cafemapdb.place.name</code>.
     */
    public final TableField<PlaceRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cafemapdb.place.latitude</code>.
     */
    public final TableField<PlaceRecord, Double> LATITUDE = createField(DSL.name("latitude"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cafemapdb.place.longitude</code>.
     */
    public final TableField<PlaceRecord, Double> LONGITUDE = createField(DSL.name("longitude"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cafemapdb.place.s2_cell</code>.
     */
    public final TableField<PlaceRecord, ULong> S2_CELL = createField(DSL.name("s2_cell"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>cafemapdb.place.instagram_id</code>.
     */
    public final TableField<PlaceRecord, String> INSTAGRAM_ID = createField(DSL.name("instagram_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cafemapdb.place.google_place_id</code>.
     */
    public final TableField<PlaceRecord, String> GOOGLE_PLACE_ID = createField(DSL.name("google_place_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>cafemapdb.place.created_at</code>.
     */
    public final TableField<PlaceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cafemapdb.place.updated_at</code>.
     */
    public final TableField<PlaceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>cafemapdb.place</code> table reference
     */
    public Place() {
        this(DSL.name("place"), null);
    }

    /**
     * Create an aliased <code>cafemapdb.place</code> table reference
     */
    public Place(String alias) {
        this(DSL.name(alias), PLACE);
    }

    /**
     * Create an aliased <code>cafemapdb.place</code> table reference
     */
    public Place(Name alias) {
        this(alias, PLACE);
    }

    private Place(Name alias, Table<PlaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Place(Name alias, Table<PlaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Place(Table<O> child, ForeignKey<O, PlaceRecord> key) {
        super(child, key, PLACE);
    }

    @Override
    public Schema getSchema() {
        return Cafemapdb.CAFEMAPDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLACE_IDX_INSTAGRAM_ID, Indexes.PLACE_PRIMARY, Indexes.PLACE_S2_CELL);
    }

    @Override
    public Identity<PlaceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PLACE;
    }

    @Override
    public UniqueKey<PlaceRecord> getPrimaryKey() {
        return Keys.KEY_PLACE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlaceRecord>> getKeys() {
        return Arrays.<UniqueKey<PlaceRecord>>asList(Keys.KEY_PLACE_PRIMARY, Keys.KEY_PLACE_IDX_INSTAGRAM_ID);
    }

    @Override
    public TableField<PlaceRecord, LocalDateTime> getRecordTimestamp() {
        return CREATED_AT;
    }

    @Override
    public Place as(String alias) {
        return new Place(DSL.name(alias), this);
    }

    @Override
    public Place as(Name alias) {
        return new Place(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Place rename(String name) {
        return new Place(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Place rename(Name name) {
        return new Place(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, Double, Double, ULong, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
