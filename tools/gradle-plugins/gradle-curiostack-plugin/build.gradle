import groovy.io.GroovyPrintStream
import nl.javadude.gradle.plugins.license.License

import java.nio.file.Paths

/*
 * MIT License
 *
 * Copyright (c) 2017 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'java-gradle-plugin'
}

apply plugin: 'maven-publish'

def baselineManifestDir = project.file("$buildDir/gen-baseline")
sourceSets {
    main {
        resources {
            srcDir rootProject.file('.baseline')
        }
        output.dir(baselineManifestDir, builtBy: 'generateBaselineManifest')
    }
}

task generateBaselineManifest {
    doLast {
        project.file("$baselineManifestDir/META-INF/").mkdirs()
        GroovyPrintStream out = new GroovyPrintStream(project.file("$baselineManifestDir/META-INF/org.curioswitch.curiostack.baseline_manifest.txt"))
        def baselineDir = rootProject.file('.baseline')
        baselineDir.eachFileRecurse(groovy.io.FileType.FILES) {file ->
            out.println Paths.get(baselineDir.path).relativize(Paths.get(file.path))
        }
        out.close()
    }
}

dependencies {
    compile project(':common:google-cloud:cloud-storage')
    compile project(':tools:gradle-plugins:gradle-conda-plugin')
    compile project(':tools:gradle-plugins:gradle-golang-plugin')
    compile project(':tools:gradle-plugins:gradle-protobuf-plugin')
    compile project(':tools:gradle-plugins:gradle-helpers')
    compile project(':tools:gradle-plugins:gradle-tool-downloader-plugin')
    compile project(':tools:gradle-plugins:java-groovy-compat')

    compile 'com.bmuschko:gradle-docker-plugin'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
    compile 'com.diffplug.spotless:spotless-plugin-gradle'
    compile 'com.github.ben-manes:gradle-versions-plugin'
    compile 'com.google.auth:google-auth-library-oauth2-http'
    compile 'com.google.guava:guava'
    compile 'com.hubspot.jinjava:jinjava:2.4.12'
    compile 'com.jfrog.bintray.gradle:gradle-bintray-plugin'
    compile 'com.palantir:gradle-baseline-java'
    compile 'gradle.plugin.com.boxfuse.client:gradle-plugin-publishing'
    compile 'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:1.0.0-rc1'
    compile 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties'
    compile 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin'
    compile 'io.fabric8:kubernetes-client'
    compile 'io.spring.gradle:dependency-management-plugin'
    compile 'me.champeau.gradle:jmh-gradle-plugin'
    compile 'net.ltgt.gradle:gradle-apt-plugin'
    compile 'net.ltgt.gradle:gradle-errorprone-plugin'
    compile 'nu.studer:gradle-jooq-plugin'
    compile 'org.bouncycastle:bcpkix-jdk15on'

    // Flyway plugin uses the gradle classpath, so adding this allows flyway to access cloud sql.
    runtime 'com.google.cloud.sql:mysql-socket-factory'
    runtime 'mysql:mysql-connector-java'

    // TODO(choko): Remove after jooq fixes this requirement - https://github.com/jOOQ/jOOQ/issues/6879
    // It's simpler to add these explicitly rather than requiring Gradle to be run with --add-modules
    runtime 'javax.activation:activation'
    runtime 'org.glassfish.jaxb:jaxb-runtime'

    annotationProcessor 'org.immutables:value'
    compileOnly group: 'org.immutables', name: 'value', classifier: 'annotations'
}

gradlePlugin {
    plugins {
        buildCache {
            id = 'org.curioswitch.gradle-gcloud-build-cache-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.gcloud.GcloudBuildCachePlugin'
        }
        ci {
            id = 'org.curioswitch.gradle-curio-generic-ci-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.ci.CurioGenericCiPlugin'
        }
        cloudbuildGithub {
            id = 'org.curioswitch.gradle-curio-cloudbuild-github-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.cloudbuild.CloudbuildGithubPlugin'
        }
        codelabs {
            id = 'org.curioswitch.gradle-codelabs-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.codelabs.CodelabsPlugin'
        }
        curiostack {
            id = 'org.curioswitch.gradle-curiostack-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.curiostack.CuriostackPlugin'
        }
        database {
            id = 'org.curioswitch.gradle-curio-database-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.gcloud.CurioDatabasePlugin'
        }
        gcloud {
            id = 'org.curioswitch.gradle-gcloud-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.gcloud.GcloudPlugin'
        }
        grpcApi {
            id = 'org.curioswitch.gradle-grpc-api-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.grpcapi.GrpcApiPlugin'
        }
        node {
            id = 'org.curioswitch.gradle-node-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.nodejs.NodePlugin'
        }
        server {
            id = 'org.curioswitch.gradle-curio-server-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.curioserver.CurioServerPlugin'
        }
        terraform {
            id = 'org.curioswitch.gradle-terraform-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.terraform.TerraformPlugin'
        }
        web {
            id = 'org.curioswitch.gradle-curio-web-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.curioweb.CurioWebPlugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = 'Gradle Curiostack Plugin'
                description = 'A highly opinionated plugin for setting up a gradle codebase ' +
                        'using Curiostack conventions. Defines shared configuration and ' +
                        'applies other useful plugins in an aim to be the only plugin in a ' +
                        'root project.'
                url = 'https://github.com/curioswitch/curiostack/tree/master/' +
                        'tools/gradle-plugins/gradle-curiostack-plugin'
            }
        }
    }
}

// TODO(choko): Figure out how to disable license check of baseline config and reenable.
tasks.withType(License) {
    enabled = false
}
