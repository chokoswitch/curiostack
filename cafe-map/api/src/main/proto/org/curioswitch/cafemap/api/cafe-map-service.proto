/*
 * MIT License
 * 
 * Copyright (c) 2019 Choko (choko@curioswitch.org)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

syntax = "proto3";

package org.curioswitch.cafemap.api;

option java_package = "org.curioswitch.cafemap.api";
option java_multiple_files = true;

// A LatLng is a point in geographical coordinates: latitude and longitude.
message LatLng {
  // The latitude of a point, in degrees. Must be in the range [-90, 90].
  double latitude = 1;

  // The longitude of a point, in degrees. Must be in the range [-180, 180].
  double longitude = 2;
}

// A rectangle in geographical coordinates, including one that crosses the 180 degrees longitudinal
// meridian.
//
// See: https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBounds
message LatLngBounds {
  // The `LatLng` of the southwest corner of the bounding box.
  LatLng south_west = 1;

  // The `LatLng` of the northeast corner of the bounding box.
  LatLng north_east = 2;
}

// A request for the `GetPlaces` method.
message GetPlacesRequest {
  // The viewport to get places for. Only places falling inside the viewport will be returned.
  LatLngBounds viewport = 1;
}

// A place, typically rendered on a map.
message Place {
  // The position of the place.
  LatLng position = 1;

  // The name of the place.
  string name = 2;

  // The location ID of this place on Instagram. Not set if this location was not found on
  // Instagram.
  string instagram_id = 3;
}

// A response for the `GetPlaces` method.
message GetPlacesResponse {
  // Places corresponding to `GetPlacesRequest`.
  repeated Place place = 1;
}

// A request for the `GetPlace` method.
message GetPlaceRequest {
  // The Instagram ID of the place.
  string instagram_id = 1;
}

// A response for the `GetPlace` method.
message GetPlaceResponse {
  // The place corresponding to `GetPlaceRequest`.
  Place place = 1;
}

// A landmark, which is only shown on the map for reference but is not actually the target of
// discovery, as a `Place` would be.
message Landmark {
  // The ID of the landmark.
  string id = 1;

  // The Google Places API ID of the landmark. Not necessarily constant.
  string google_place_id = 2;

  // The location of this landmark, as a S2 cell ID.
  uint64 s2_cell_id = 3;

  // A landmark type, for determining the icon to display for it.
  enum Type {
    // Unknown type, will be ignored.
    UNKNOWN = 0;

    // A beauty salon (e.g., hair salon).
    BEAUTY_SALON = 1;

    // A gas station.
    GAS_STATION = 2;

    // A park
    PARK = 3;

    // A post office.
    POST_OFFICE = 4;

    // A school.
    SCHOOL = 5;
  }

  // The type of this landmark.
  Type type = 4;
}

// A request for the `ListLandmarks` method.
message ListLandmarksRequest {
  // The viewport to return landmarks for.
  LatLngBounds viewport = 1;
}

// A response for the `ListLandmarks` method.
message ListLandmarksResponse {
  // The landmarks found in the requested viewport.
  repeated Landmark landmark = 1;
}

service CafeMapService {
  // Returns a list of places.
  rpc GetPlaces (GetPlacesRequest) returns (GetPlacesResponse);

  // Returns the single, specified place.
  rpc GetPlace (GetPlaceRequest) returns (GetPlaceResponse);

  // Returns the landmarks for a given viewport.
  rpc ListLandmarks (ListLandmarksRequest) returns (ListLandmarksResponse);
}
