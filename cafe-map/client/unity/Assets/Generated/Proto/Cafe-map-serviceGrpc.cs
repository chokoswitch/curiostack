// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: org/curioswitch/cafemap/api/cafe-map-service.proto
// </auto-generated>
// Original file comments:
//
// MIT License
// 
// Copyright (c) 2019 Choko (choko@curioswitch.org)
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Org.Curioswitch.Cafemap.Api {
  public static partial class CafeMapService
  {
    static readonly string __ServiceName = "org.curioswitch.cafemap.api.CafeMapService";

    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest> __Marshaller_org_curioswitch_cafemap_api_GetPlacesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse> __Marshaller_org_curioswitch_cafemap_api_GetPlacesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest> __Marshaller_org_curioswitch_cafemap_api_GetPlaceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse> __Marshaller_org_curioswitch_cafemap_api_GetPlaceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest> __Marshaller_org_curioswitch_cafemap_api_ListLandmarksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse> __Marshaller_org_curioswitch_cafemap_api_ListLandmarksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest, global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse> __Method_GetPlaces = new grpc::Method<global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest, global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlaces",
        __Marshaller_org_curioswitch_cafemap_api_GetPlacesRequest,
        __Marshaller_org_curioswitch_cafemap_api_GetPlacesResponse);

    static readonly grpc::Method<global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest, global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse> __Method_GetPlace = new grpc::Method<global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest, global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlace",
        __Marshaller_org_curioswitch_cafemap_api_GetPlaceRequest,
        __Marshaller_org_curioswitch_cafemap_api_GetPlaceResponse);

    static readonly grpc::Method<global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest, global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse> __Method_ListLandmarks = new grpc::Method<global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest, global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLandmarks",
        __Marshaller_org_curioswitch_cafemap_api_ListLandmarksRequest,
        __Marshaller_org_curioswitch_cafemap_api_ListLandmarksResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.Curioswitch.Cafemap.Api.CafeMapServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CafeMapService</summary>
    [grpc::BindServiceMethod(typeof(CafeMapService), "BindService")]
    public abstract partial class CafeMapServiceBase
    {
      /// <summary>
      /// Returns a list of places.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse> GetPlaces(global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the single, specified place.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse> GetPlace(global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the landmarks for a given viewport.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse> ListLandmarks(global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CafeMapService</summary>
    public partial class CafeMapServiceClient : grpc::ClientBase<CafeMapServiceClient>
    {
      /// <summary>Creates a new client for CafeMapService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CafeMapServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CafeMapService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CafeMapServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CafeMapServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CafeMapServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a list of places.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse GetPlaces(global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of places.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse GetPlaces(global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlaces, null, options, request);
      }
      /// <summary>
      /// Returns a list of places.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse> GetPlacesAsync(global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of places.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse> GetPlacesAsync(global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlaces, null, options, request);
      }
      /// <summary>
      /// Returns the single, specified place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse GetPlace(global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the single, specified place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse GetPlace(global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlace, null, options, request);
      }
      /// <summary>
      /// Returns the single, specified place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse> GetPlaceAsync(global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the single, specified place.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse> GetPlaceAsync(global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlace, null, options, request);
      }
      /// <summary>
      /// Returns the landmarks for a given viewport.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse ListLandmarks(global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLandmarks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the landmarks for a given viewport.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse ListLandmarks(global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLandmarks, null, options, request);
      }
      /// <summary>
      /// Returns the landmarks for a given viewport.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse> ListLandmarksAsync(global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLandmarksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the landmarks for a given viewport.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse> ListLandmarksAsync(global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLandmarks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CafeMapServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CafeMapServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CafeMapServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPlaces, serviceImpl.GetPlaces)
          .AddMethod(__Method_GetPlace, serviceImpl.GetPlace)
          .AddMethod(__Method_ListLandmarks, serviceImpl.ListLandmarks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CafeMapServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetPlaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Org.Curioswitch.Cafemap.Api.GetPlacesRequest, global::Org.Curioswitch.Cafemap.Api.GetPlacesResponse>(serviceImpl.GetPlaces));
      serviceBinder.AddMethod(__Method_GetPlace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Org.Curioswitch.Cafemap.Api.GetPlaceRequest, global::Org.Curioswitch.Cafemap.Api.GetPlaceResponse>(serviceImpl.GetPlace));
      serviceBinder.AddMethod(__Method_ListLandmarks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Org.Curioswitch.Cafemap.Api.ListLandmarksRequest, global::Org.Curioswitch.Cafemap.Api.ListLandmarksResponse>(serviceImpl.ListLandmarks));
    }

  }
}
#endregion
