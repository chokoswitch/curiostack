/*
 *
 * {{properCase name }}
 *
 */

import React from 'react';
{{#if wantHeaders}}
import Helmet from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
import { connect, Dispatch } from 'react-redux';
import { bindActionCreators, compose } from 'redux';

{{#if wantSaga}}
const injectSaga = require('utils/injectSaga').default;
{{/if}}

{{#if wantActionsAndReducer}}
const injectReducer = require('utils/injectReducer').default;
import * as actions from './actions';
import reducer from './reducer';
import select{{properCase name}} from './selectors';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

interface DispatchProps {
}

type Props = DispatchProps;

export class {{ properCase name }} extends {{{ type }}}<Props> {
  public render() {
    return (
      <div>
      {{#if wantHeaders}}
        <Helmet
          title="{{properCase name}}"
          meta={{curly true}}[
            {{curly true}} name: 'description', content: 'Description of {{properCase name}}' {{curly}},
          ]{{curly}}
        />
      {{/if}}
      {{#if wantMessages}}
        <FormattedMessage {...messages.header} />
      {{/if}}
      </div>
    );
  }
}

const mapDispatchToProps = (dispatch: Dispatch<{}>): DispatchProps =>
  bindActionCreators(
    {
    },
    dispatch,
  );

{{#if wantActionsAndReducer}}
const withConnect = connect<{}, DispatchProps>(select{{properCase name}}, mapDispatchToProps);

const withReducer = injectReducer({ reducer, key: '{{ camelCase name }}' });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ saga, key: '{{ camelCase name }}' });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect,
)({{ properCase name }});
