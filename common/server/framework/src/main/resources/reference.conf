//
// MIT License
//
// Copyright (c) 2020 Choko (choko@curioswitch.org)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

database {
  jdbcUrl: ""
  username: ""
  password: ""
  leakDetectionThreshold: 0
  logQueries: false
  connectionMaxLifetime: 28000s
  connectTimeout: 0s
  socketTimeout: 0s
}

firebaseAuth {
  allowedGoogleDomains: []
  allowUnverifiedEmail: false
  projectId: ""
  serviceAccountBase64: ""
  excludedPaths: []
  includedPaths: []
}

gcloud {
  serviceAccountBase64: ""
  credentialScopes: []
}

javascriptConfig {
  version: 0
}

logging {
  logProducerExecution: false
  traceProducerExecution: false
  blacklistedRequestHeaders: [ "authorization" ]
  blacklistedResponseHeaders: []
  logRequestContent: false
  logResponseContent: false
  logAllServerRequests: false
  logAllClientRequests: false
}

monitoring {
  serverName: unknown
  stackdriverProjectId: ''
  reportTraces: false
  traceReportInterval: 5s
  traceQueueSize: 10000
  traceSamplingRate: 1.0
}

security {
  httpsOnly: false
  additionalResponseHeaders: {}
}

server {
  port: 8080
  disableClientCertificateVerification: false
  disableServerCertificateVerification: false
  disableDocService: false
  disableGrpcServiceDiscovery: false
  generateSelfSignedCertificate: false
  grpcPath: /api
  caCertificatePath: ""
  additionalCaCertificatePath: ""
  tlsCertificatePath: ""
  tlsPrivateKeyPath: ""
  clientTlsCertificatePath: ""
  clientTlsPrivateKeyPath: ""
  rpcAclsPath: ""
  disableSslAuthorization: false
  enableIapAuthorization: false
  ipFilterRules: []
  ipFilterInternalOnly: false
  enableGracefulShutdown: false
  disableEdns: false
}

redis {
  url: ""
  noop: false
  cluster: false
}
